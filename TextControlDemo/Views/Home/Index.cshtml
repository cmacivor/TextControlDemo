@using TXTextControl.Web
@using TXTextControl.Web.MVC

@*@Html.TXTextControl().TextControl().Render()*@

<input type="button" value="Create PDF" onclick="createPDF()" />

<!-- Trigger/Open The Modal -->
<button id="myBtn" >Open Modal</button>
<button id=btnModal onclick="openModal()" >Open modal</button>

<!-- The Modal -->
<div id="myModal" class="modal">
    <!-- Modal content -->
    <div class="modal-content">
        <div class="modal-header">
            <span class="close">&times;</span>
            <h2>Modal Header</h2>
        </div>
        <div id="editor"></div>
        <div class="modal-footer">
            <h3>Modal Footer</h3>
            <input type="text" id="txtFileName" placeholder="File name" />
            <input onclick="loadFile()" id="btnLoad" type="button" value="Load" />
            <input onclick="saveFile()" id="btnSave" type="button" value="Save" />
            <label class="switch">
                <input id="chkTrackChanges" type="checkbox" onclick="trackedChangeSwitchEventHandler()" >
                <span class="slider round"></span>
            </label>
        </div>
    </div>

</div>

@section Scripts {
    <script type="text/javascript" src="~/js/modal-loader.js"></script>
    <script type="text/javascript">

           function loadEditor() {
	        // check, if editor exists and
	        // closes the WebSocket connection gracefully
	        // and removes the whole editor from the DOM.
	        if (typeof TXTextControl !== 'undefined')
	            TXTextControl.removeFromDom();

	        // load the partial view
	        $('#editor').load('@Url.Action("EditorPartial")');
	    }

        // converts base64 string back to a blob
        function base64ToBlob(base64) {
            var binary = atob(base64.replace(/\s/g, ''));
            var len = binary.length;
            var buffer = new ArrayBuffer(len);
            var view = new Uint8Array(buffer);

            for (var i = 0; i < len; i++) {
                view[i] = binary.charCodeAt(i);
            }

            return view;
        }

 
        function createPDF() {
            // save the contents of the editor
            TXTextControl.saveDocument(TXTextControl.streamType.InternalUnicodeFormat, function (e) {

                // call the Web API "CreatePDF"
                $.ajax({
                    type: "POST",
                    url: "/Home/CreatePDF?id=123",
                    contentType: 'application/json',
                    data: JSON.stringify({
                        document: e.data
                    }),

                    success: successFunc,
                    error: errorFunc
                });

                function successFunc(data, status) {
                    // create a file blob
                    var file = new Blob([base64ToBlob(data)], { type: "application/pdf" });

                    // create a temporary link element
                    var a = document.createElement("a");
                    a.href = URL.createObjectURL(file);
                    a.download = "results.pdf";

                    // attach to body and click
                    document.body.appendChild(a);
                    a.click();

                    // remove the element
                    setTimeout(function () {
                        document.body.removeChild(a);
                    }, 0);

                }

                function errorFunc(xhr, ajaxOptions, thrownError) {
                    alert(thrownError);
                }
            });
        }

        // Get the modal
        var modal = document.getElementById("myModal");

        // Get the button that opens the modal
        var btn = document.getElementById("myBtn");

        // Get the <span> element that closes the modal
        var span = document.getElementsByClassName("close")[0];

        // When the user clicks on the button, open the modal
        btn.onclick = function () {
            modal.style.display = "block";
            loadEditor();
        }

        // When the user clicks on <span> (x), close the modal
        span.onclick = function () {
            modal.style.display = "none";
        }

        // When the user clicks anywhere outside of the modal, close it
        window.onclick = function (event) {
            if (event.target == modal) {
                modal.style.display = "none";
            }
        }



    </script>
}

